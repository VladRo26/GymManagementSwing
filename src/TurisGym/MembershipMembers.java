/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TurisGym;
import java.sql.*;
import com.microsoft.sqlserver.jdbc.SQLServerDriver;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author turis
 */
public class MembershipMembers extends javax.swing.JFrame {

    /**
     * Creates new form MembershipMembers
     */
    private int memberId;  // Member ID to use for queries
    
    public MembershipMembers(){
       initComponents(); 
    }

    public MembershipMembers(int memberId) {
        initComponents();
        this.memberId = memberId;
        Connect();
        loadMembershipTypes(); // Load membership types into the combo box
        loadMemberMemberships();
    }
    
    
    String driver="com.microsoft.sqlserver.jdbc.SQLServerDriver";
    String url="jdbc:sqlserver://DESKTOP-STANKTQ:1433;databaseName=PROJECT;encrypt=true;trustServerCertificate=true;";
    String user="Vlad";
    String pass="****";

    Connection con;
    PreparedStatement pst;

    public void Connect() {
        try {
            Class.forName(driver);
            con = DriverManager.getConnection(url, user, pass);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    private void clearFields() {
    // Reset the table selection
    MembersTrainerTable.clearSelection();

    // Reset combo box and date choosers or other components as needed
    MMTypeNameCombo.setSelectedIndex(-1); // Resets the combo box
    MMStartDate.setDate(null);            // Resets the start date chooser
    MMStartDate.setEnabled(true); // Make sure the start date chooser is enabled when clearing fields

    // Additional field resets can be added here
    // For example, clearing a text field:
    // someTextField.setText("");
    }
    
    private void loadMembershipTypes() {
    try {
        String sql = "SELECT TypeName FROM MembershipTypes";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        MMTypeNameCombo.removeAllItems(); // Clear the combo box
        while (rs.next()) {
            MMTypeNameCombo.addItem(rs.getString("TypeName")); // Add each membership type to the combo box
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading membership types: " + ex.getMessage());
    }
    }
    
    private void loadMemberMemberships() {
    // Example query to get membership details based on memberId
        try {
        String sql = "SELECT m.MembershipID, mt.TypeName, mt.MembershipTypeID, m.StartDate, m.EndDate " +
                     "FROM Memberships m JOIN MembershipTypes mt ON m.MembershipTypeID = mt.MembershipTypeID " +
                     "WHERE m.MemberID = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setInt(1, memberId);
        ResultSet rs = pst.executeQuery();
        DefaultTableModel model = (DefaultTableModel) MembersTrainerTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            Vector<Object> row = new Vector<>();
            row.add(rs.getInt("MembershipID"));
            row.add(rs.getString("TypeName"));
            row.add(rs.getDate("StartDate"));
            row.add(rs.getDate("EndDate"));
            // Skip adding MembershipTypeID to the table model
            model.addRow(row);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading memberships: " + ex.getMessage());
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        MMStartDate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MembersTrainerTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Addbtn = new javax.swing.JButton();
        Edittn = new javax.swing.JButton();
        MMTypeNameCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));

        jLabel5.setText("Go back");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel5)
                .addContainerGap(155, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addComponent(jLabel5)
                .addContainerGap(494, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 956, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Memberships");

        jLabel11.setText("Start Date");

        MembersTrainerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MembershipID", "Memebership Name", "Start Date", "End Date"
            }
        ));
        MembersTrainerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MembersTrainerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(MembersTrainerTable);

        jLabel2.setText("Membership Name");

        Addbtn.setText("Add");
        Addbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddbtnMouseClicked(evt);
            }
        });
        Addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddbtnActionPerformed(evt);
            }
        });

        Edittn.setText("Edit");
        Edittn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EdittnMouseClicked(evt);
            }
        });

        MMTypeNameCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Memberships");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(MMTypeNameCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Addbtn))
                            .addComponent(Edittn)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jLabel3)))
                .addGap(55, 55, 55)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MMStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(153, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(247, 247, 247))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(452, 452, 452))))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(MMTypeNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(MMStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(Addbtn)
                        .addGap(45, 45, 45)
                        .addComponent(Edittn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(328, 328, 328))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 710, Short.MAX_VALUE)))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void MembersTrainerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MembersTrainerTableMouseClicked
        // TODO add your handling code here:
          int selectedRow = MembersTrainerTable.getSelectedRow();
            if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) MembersTrainerTable.getModel();
            String typeName = model.getValueAt(selectedRow, 1).toString();
            Date startDate = (Date) model.getValueAt(selectedRow, 2);
            Date endDate = (Date) model.getValueAt(selectedRow, 3);

            MMTypeNameCombo.setSelectedItem(typeName);
            MMStartDate.setDate(startDate);
            MMStartDate.setEnabled(false); // Disable the start date chooser

    }
    }//GEN-LAST:event_MembersTrainerTableMouseClicked

    private void AddbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddbtnActionPerformed

    private void AddbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddbtnMouseClicked
        // TODO add your handling code here:
          MMStartDate.setEnabled(true);
    String typeName = MMTypeNameCombo.getSelectedItem().toString();
    java.util.Date startDate = MMStartDate.getDate();

    if (typeName.isEmpty() || startDate == null) {
        JOptionPane.showMessageDialog(this, "Please enter all fields");
        return;
    }

    // Check if the start date is before the current date
    java.util.Date currentDate = new java.util.Date();
    if (startDate.before(currentDate)) {
        JOptionPane.showMessageDialog(this, "The start date cannot be before the current date.");
        return;
    }

    try {
        // Fetch the Membership Type ID and duration
        String getTypeDetails = "SELECT MembershipTypeID, DurationMonths FROM MembershipTypes WHERE TypeName = ?";
        PreparedStatement pst = con.prepareStatement(getTypeDetails);
        pst.setString(1, typeName);
        ResultSet rs = pst.executeQuery();
        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "Membership type not found.");
            return;
        }

        int typeID = rs.getInt("MembershipTypeID");
        int durationMonths = rs.getInt("DurationMonths");

        // Calculate the end date
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        cal.add(Calendar.MONTH, durationMonths);
        java.util.Date endDate = cal.getTime();

        // Check for overlapping memberships
        String checkOverlapSql = "SELECT COUNT(*) FROM Memberships WHERE MemberID = ? AND NOT (EndDate <= ? OR StartDate >= ?)";
        PreparedStatement checkPst = con.prepareStatement(checkOverlapSql);
        checkPst.setInt(1, memberId);
        checkPst.setDate(2, new java.sql.Date(startDate.getTime()));
        checkPst.setDate(3, new java.sql.Date(endDate.getTime()));
        ResultSet overlapRs = checkPst.executeQuery();
        if (overlapRs.next() && overlapRs.getInt(1) > 0) {
            JOptionPane.showMessageDialog(this, "Overlapping membership dates are not allowed.");
            return;
        }

        // Insert the new membership
        String insertSql = "INSERT INTO Memberships (MemberID, MembershipTypeID, StartDate, EndDate) VALUES (?, ?, ?, ?)";
        pst = con.prepareStatement(insertSql);
        pst.setInt(1, memberId);
        pst.setInt(2, typeID);
        pst.setDate(3, new java.sql.Date(startDate.getTime()));
        pst.setDate(4, new java.sql.Date(endDate.getTime()));
        pst.executeUpdate();
        JOptionPane.showMessageDialog(this, "Membership added successfully.");

        // Refresh the memberships list and clear fields
        loadMemberMemberships();
        clearFields();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error adding membership: " + ex.getMessage());
    }
    }//GEN-LAST:event_AddbtnMouseClicked

    private void EdittnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EdittnMouseClicked
        // TODO add your handling code here:
          try {
        int selectedRow = MembersTrainerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a membership to edit.");
            return;
        }

        Integer membershipID = (Integer) MembersTrainerTable.getValueAt(selectedRow, 0);
        java.util.Date newStartDate = MMStartDate.getDate();
        if (newStartDate == null) {
            JOptionPane.showMessageDialog(this, "Please enter a valid start date.");
            return;
        }

        // Fetch the duration based on MembershipTypeID directly from the table or query
        Integer typeID = (Integer) MembersTrainerTable.getValueAt(selectedRow, 2);  // Assuming column 2 has the MembershipTypeID

        String getTypeDetails = "SELECT DurationMonths FROM MembershipTypes WHERE MembershipTypeID = ?";
        PreparedStatement pst = con.prepareStatement(getTypeDetails);
        pst.setInt(1, typeID);
        ResultSet rs = pst.executeQuery();
        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "Membership type not found.");
            return;
        }

        int durationMonths = rs.getInt("DurationMonths");
        Calendar cal = Calendar.getInstance();
        cal.setTime(newStartDate);
        cal.add(Calendar.MONTH, durationMonths);
        java.util.Date newEndDate = cal.getTime();

        // Update the membership
        String updateSql = "UPDATE Memberships SET StartDate = ?, EndDate = ? WHERE MembershipID = ?";
        pst = con.prepareStatement(updateSql);
        pst.setDate(1, new java.sql.Date(newStartDate.getTime()));
        pst.setDate(2, new java.sql.Date(newEndDate.getTime()));
        pst.setInt(3, membershipID);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(this, "Membership updated successfully.");

        // Refresh the memberships list
        loadMemberMemberships();
        clearFields();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error updating membership: " + ex.getMessage());
    }
    }//GEN-LAST:event_EdittnMouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
        if (!MembersTrainerTable.contains(evt.getPoint())) {
            clearFields(); // Call the clearFields method
            MMStartDate.setEnabled(true); // Enable the start date chooser for new entries
        }

    }//GEN-LAST:event_jPanel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MembershipMembers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MembershipMembers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MembershipMembers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MembershipMembers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MembershipMembers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addbtn;
    private javax.swing.JButton Edittn;
    private com.toedter.calendar.JDateChooser MMStartDate;
    private javax.swing.JComboBox<String> MMTypeNameCombo;
    private javax.swing.JTable MembersTrainerTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
